---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    server: nginx
spec:
  containers:
    - name: nginx
      image: nginx
      ports:
      - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: LoadBalancer
  selector:
    server: nginx
  ports:
    - protocol: TCP
      port: 80        #This line specifies the port number that the Service will listen on for incoming traffic. In this case, it sets the port number to 80, which is a common port used for HTTP traffic.
      targetPort: 80  #This line determines the port to which incoming traffic will be routed within the Pods. It defines the target port in the container where the application is listening. In this configuration, incoming traffic arriving at port 80 on the Service will be forwarded to port 80 of the container running inside the Pods.

# kubectl apply -f 03-service-load.yaml
# [ec2-user@ip-172-31-10-32 service]$ kubectl get service
# NAME            TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)        AGE
# kubernetes      ClusterIP      10.100.0.1       <none>                                                                    443/TCP        3h39m
# nginx-service   LoadBalancer   10.100.209.115   a3fca7e3cf40a4fefb67e89a3224de0e-619553555.ap-south-1.elb.amazonaws.com   80:32188/TCP   11s
# kubectl get pods
#kubectl delete -f 03-service-load.yaml

# It will create a LoadBalancer in AWS Cloud. In LoadBalancer we can see DNS same as above, by using this DNS name we can access the application.

# LoadBalancer
# Exposes the Service externally using an external load balancer. 
# LoadBalancer only works with Cloud providers(AWS, GCP, Azure)